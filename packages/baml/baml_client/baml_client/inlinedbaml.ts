/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "main.baml": "generator typescript {\n  output_type \"typescript/react\"\n  output_dir \"../baml_client\"\n  version \"0.208.5\"\n}\n\nclient<llm> Gemini {\n  provider google-ai\n  options {\n    model \"gemini-2.5-flash\"\n    api_key env.GEMINI_API_KEY\n  }\n}\n\nclass BankTransaction {\n  date string\n  description string\n  amount float\n  balance float\n  transaction_type string // \"debit\" | \"credit\"\n}\n\nclass IncomeBreakdown {\n  salary_income float? // Regular employment income\n  other_income float? // Irregular income sources\n  fund_transfers_in float // Money received from other accounts\n  total_credits float // All credits for reference\n  calculation_method string // How monthly_income was calculated\n}\n\nclass ExpenseBreakdown {\n  actual_expenses float // Real spending on goods/services\n  fund_transfers_out float // Money sent to other accounts\n  total_debits float // All debits for reference\n  calculation_method string // How monthly_expenses was calculated\n}\n\nclass CreditScoreAnalysis {\n  overall_score int // 1-850 scale\n  score_category string // \"Poor\" | \"Fair\" | \"Good\" | \"Very Good\" | \"Excellent\"\n  monthly_income float?\n  monthly_expenses float?\n  income_breakdown IncomeBreakdown?\n  expense_breakdown ExpenseBreakdown?\n  savings_rate float? // percentage\n  debt_to_income_ratio float? // percentage\n  payment_consistency_score int // 1-100\n  account_stability_months int\n  risk_factors string[]\n  positive_factors string[]\n  recommendations string[]\n  detailed_analysis string\n}\n\nfunction ExtractTransactions(pdfText: string) -> BankTransaction[] {\n  client Gemini\n  prompt #\"\n    You are an expert at extracting transaction data from Malaysian bank statements.\n    \n    Raw PDF Text:\n    {{ pdfText }}\n    \n    Extract all transactions from this bank statement text and return them as a JSON array.\n    Each transaction should have the following structure:\n    {\n      \"date\": \"YYYY-MM-DD\",\n      \"description\": \"transaction description\",\n      \"amount\": <positive for credits, negative for debits>,\n      \"balance\": <account balance after transaction>,\n      \"transaction_type\": \"credit\" or \"debit\"\n    }\n    \n    Guidelines:\n    - Look for transaction patterns in Malaysian bank statements (Maybank, CIMB, Public Bank, etc.)\n    - Identify salary credits, EPF contributions, ATM withdrawals, online payments\n    - Convert dates to YYYY-MM-DD format\n    - Use positive amounts for credits (money in) and negative for debits (money out)\n    - Extract the running balance after each transaction\n    - Include all transactions, even small ones\n    - If balance is not clear, estimate based on previous balance and transaction amount\n    \n    Return only the JSON array of transactions, no other text.\n  \"#\n}\n\nfunction AnalyzeBankStatement(transactions: BankTransaction[]) -> CreditScoreAnalysis {\n  client Gemini\n  prompt #\"\n    You are a financial analyst specializing in Malaysian banking and credit scoring.\n    \n    STEP 1: UNDERSTAND THE DATA\n    You will receive bank transactions in this format:\n    {{ transactions }}\n    \n    STEP 2: MATHEMATICAL CALCULATIONS (CRITICAL - FOLLOW EXACTLY)\n    \n    First, let me show you how to calculate totals correctly:\n    \n    EXAMPLE CALCULATION:\n    If you have transactions:\n    - Credit: +200.00, +50.00, +100.00\n    - Debit: -26.00, -70.00, -100.00\n    \n    CORRECT CALCULATION:\n    total_credits = 200.00 + 50.00 + 100.00 = 350.00\n    total_debits = 26.00 + 70.00 + 100.00 = 196.00 (convert negatives to positive)\n    \n    NOW APPLY THIS TO THE ACTUAL TRANSACTIONS:\n    \n    STEP 2A: CALCULATE TOTAL CREDITS\n    - Go through EVERY transaction with transaction_type = \"credit\"\n    - Add up ALL the amounts (they should be positive)\n    - total_credits = sum of all credit amounts\n    \n    STEP 2B: CALCULATE TOTAL DEBITS  \n    - Go through EVERY transaction with transaction_type = \"debit\"\n    - Take the absolute value of each amount (convert negative to positive)\n    - Add them all up\n    - total_debits = sum of all debit amounts (as positive numbers)\n    \n    STEP 2C: CATEGORIZE TRANSACTIONS\n    - Fund Transfers IN: Credits with \"FUND TRANSFER\", \"IBK FUND TFR TO\"\n    - Fund Transfers OUT: Debits with \"FUND TRANSFER\", \"IBK FUND TFR FR\", \"TRANSFER FROM\"\n    - Actual Expenses: Debits for real purchases (SALE DEBIT, FPX PAYMENT, PYMT FROM)\n    - Cash Deposits: Credits with \"CASH DEPOSIT\"\n    - Salary: Credits with \"SALARY\", \"PAYROLL\" (likely none in this data)\n    \n    STEP 2D: CALCULATE SUBCATEGORIES\n    fund_transfers_in = sum of all fund transfer credits\n    fund_transfers_out = sum of all fund transfer debits (as positive)\n    actual_expenses = sum of all expense debits (as positive)\n    \n    STEP 3: VERIFICATION (MANDATORY)\n    Check your math:\n    - Does total_credits = fund_transfers_in + cash_deposits + salary_income + other_income?\n    - Does total_debits = fund_transfers_out + actual_expenses?\n    \n    If not, recalculate until they match!\n    \n    STEP 4: FINANCIAL ANALYSIS\n    Based on Malaysian banking context:\n    - No salary pattern = monthly_income = null\n    - Calculate monthly_expenses from actual spending only\n    - Assess financial stability and risk factors\n    \n    Return your analysis as a JSON object with the following structure:\n    {\n      \"overall_score\": <integer between 1-850>,\n      \"score_category\": \"<Poor|Fair|Good|Very Good|Excellent>\",\n      \"monthly_income\": <float or null - ONLY regular salary/employment income>,\n      \"monthly_expenses\": <float or null - actual spending, not transfers>,\n      \"income_breakdown\": {\n        \"salary_income\": <float or null>,\n        \"other_income\": <float or null>,\n        \"fund_transfers_in\": <float - sum of all fund transfer credits>,\n        \"total_credits\": <float - sum of ALL credit transactions - MUST EQUAL 918.14>,\n        \"calculation_method\": \"Show your step-by-step calculation: List each credit transaction and sum them. Example: 'Credit 1: 200.00 + Credit 2: 50.00 = Total: 250.00'\"\n      },\n      \"expense_breakdown\": {\n        \"actual_expenses\": <float - sum of real spending debits>,\n        \"fund_transfers_out\": <float - sum of fund transfer debits>,\n        \"total_debits\": <float - sum of ALL debit transactions - MUST EQUAL 784.65>,\n        \"calculation_method\": \"Show your step-by-step calculation: List each debit transaction and sum them. Example: 'Debit 1: 26.00 + Debit 2: 70.00 = Total: 96.00'\"\n      },\n      \"savings_rate\": <float percentage or null>,\n      \"debt_to_income_ratio\": <float percentage or null>,\n      \"payment_consistency_score\": <integer between 1-100>,\n      \"account_stability_months\": <integer>,\n      \"risk_factors\": [\"<risk factor 1>\", \"<risk factor 2>\"],\n      \"positive_factors\": [\"<positive factor 1>\", \"<positive factor 2>\"],\n      \"recommendations\": [\"<recommendation 1>\", \"<recommendation 2>\"],\n      \"detailed_analysis\": \"<comprehensive explanation including calculation methodology>\"\n    }\n\n    Score Categories:\n    - Poor: 300-579\n    - Fair: 580-669  \n    - Good: 670-739\n    - Very Good: 740-799\n    - Excellent: 800-850\n\n    Be thorough but practical in your analysis and recommendations.\n  \"#\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}